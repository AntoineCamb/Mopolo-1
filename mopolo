/*
1.3 A partir du schéma conceptuel, définir une application objet relationnelle
Pour cela vous devez :
	o Définir les types de données avec pour chacun d’eux une méthode d’ordre. Il est
		important de définir au moins un champ de type clob ou blob. Mettre en oeuvre au
		moins une fois l’héritage peut être un plus
	o Définir quelques méthodes applicatives dans certains de vos types
	o Définir les tables objets avec les divers contraintes d’intégrité
	o Insérer des lignes dans vos tables objets
	o Implémenter les méthodes et testez les
Jusqu’à cette étape vous ne devez pas vous préoccuper de l’organisation physique.
*/
DROP TABLE Crepe_salee cascade CONSTRAINT;
			/* Table CREPE_SALEE supprimé(e). */
DROP TABLE Crepe_sucree cascade CONSTRAINT;
			/* Table CREPE_SUCREE supprimé(e). */
DROP TABLE Aliment cascade CONSTRAINT;
			/* Table ALIMENT supprimé(e). */
DROP TABLE Fournisseur cascade CONSTRAINT;
			/* Table FOURNISSEUR supprimé(e). */
DROP TABLE Cidre cascade CONSTRAINT;
			/* Table CIDRE supprimé(e). */
DROP TABLE Menu cascade CONSTRAINT;
			/* Table MENU supprimé(e). */
DROP TABLE Date_menu cascade CONSTRAINT;
			/* Table DATE_MENU supprimé(e). */

DROP TYPE Crepe_t force;
/
			/* Type CREPE_T supprimé(e). */
DROP TYPE Crepe_salee_t force;
/
			/* Type CREPE_SALEE_T supprimé(e). */
DROP TYPE Crepe_sucree_t force;
/
			/* Type CREPE_SUCREE_T supprimé(e). */
DROP TYPE Aliment_t force;
/
			/* Type ALIMENT_T supprimé(e). */
DROP TYPE Fournisseur_t force;
/
			/* Type FOURNISSEUR_T supprimé(e). */
DROP TYPE Cidre_t force;
/
			/* Type CIDRE_T supprimé(e). */
DROP TYPE Menu_t force;
/
			/* Type MENU_T supprimé(e). */
DROP TYPE Date_menu_t force;
/
			/* Type DATE_MENU_T supprimé(e). */
DROP TYPE listRefMenus_t force;
/
			/* Type LISTREFMENUS_T supprimé(e). */
DROP TYPE listRefAliments_t force;
/
			/* Type LISTREFALIMENTS_T supprimé(e). */
DROP TYPE listRefDates_t force;
/
			/* Type LISTREFDATES_T supprimé(e). */
DROP TYPE dates_t force;
/

CREATE TYPE date_menu_t;
/
			/* Elément Type DATE_MENU_T compilé */
CREATE TYPE listRefDates_t AS TABLE OF REF date_menu_t;
/
			/* Elément Type LISTREFDATES_T compilé */
Create TYPE dates_t As TABLE OF date;
/
			
CREATE OR REPLACE TYPE Crepe_salee_t;
/
			/* Elément Type CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE Crepe_sucree_t;
/
			/* Elément Type CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE Cidre_t;
/
			/* Elément Type CIDRE_T compilé */

CREATE OR REPLACE TYPE Fournisseur_t;
/
			/* Elément Type FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE Menu_t AS OBJECT(
	idMenu			NUMBER(5),
	intitule        VARCHAR2(25),
	refCrepeSal		REF Crepe_salee_t,
	refCrepeSuc		REF Crepe_sucree_t,
	refCidre		REF Cidre_t,
	listRefDates    listRefDates_t,
	STATIC FUNCTION getMenu(idMenu1 IN NUMBER) RETURN Menu_t,
	STATIC FUNCTION getDates(idMenu1 in NUMBER) RETURN dates_t,
	MAP MEMBER FUNCTION compMenu RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compMenu, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type MENU_T compilé */
Create or Replace TYPE listRefMenus_t AS TABLE OF REF Menu_t;
/
			/* Elément Type LISTREFMENUS_T compilé */
Create or Replace TYPE setMenus_t AS TABLE OF Menu_t;
/
			/* Elément Type SETMENUS_T compilé */

CREATE OR REPLACE TYPE Date_menu_t AS OBJECT(
	dateJour		date,
	STATIC FUNCTION getMenus(dateJour1 in date) RETURN setMenus_t,
	MAP MEMBER FUNCTION compDate RETURN date,
	PRAGMA RESTRICT_REFERENCES (compDate, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type DATE_MENU_T compilé */		
Create or Replace TYPE setDates_t AS TABLE OF Date_menu_t;
/
			/* Elément Type SETDATES_T compilé */

CREATE OR REPLACE TYPE Aliment_t AS OBJECT(
	idAliment		NUMBER(5),
	nom				VARCHAR2(25),
	region			VARCHAR2(25),
	poids			float(2),
	typeAliment		VARCHAR2(10),
	refFournisseur  REF Fournisseur_t,
	STATIC FUNCTION getAliment(idAliment1 IN NUMBER) RETURN Aliment_t,
	MAP MEMBER FUNCTION compAliment RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compAliment, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type ALIMENT_T compilé */
			
Create or Replace TYPE listRefAliments_t AS TABLE OF REF Aliment_t;
/
			/* Elément Type LISTREFALIMENTS_T compilé */
Create or Replace TYPE setAliments_t AS TABLE OF Aliment_t;
/
			/* Elément Type SETALIMENTS_T compilé */
			
CREATE OR REPLACE TYPE Crepe_t AS OBJECT(
	idCrepe			NUMBER(5),
	intitule		VARCHAR2(25),
	recette			CLOB,
	listRefAli		listRefAliments_t,
	listRefMenu		listRefMenus_t,
	MAP MEMBER FUNCTION compCrepe RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compCrepe, WNDS, WNPS, RNPS, RNDS)
)NOT FINAL;
/
			/* Elément Type CREPE_T compilé */
			
CREATE OR REPLACE TYPE Crepe_salee_t UNDER Crepe_t(
	vegetarienne 	char(1),
	STATIC FUNCTION getCrepeSa(idCrepe1 IN NUMBER) RETURN Crepe_salee_t,
	STATIC FUNCTION getAlimentsSa(idCrepe1 in NUMBER) RETURN setAliments_t,
	STATIC FUNCTION getMenusSa(idCrepe1 in NUMBER) RETURN setMenus_t,
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t),
	member procedure deleteLinkListAlim(RefAlim1 REF Aliment_t),
	member procedure updateLinkListAlim(RefAlim1 REF Aliment_t, RefAlim2 REF Aliment_t),
	member procedure addLinkListMenus(RefMenu1 REF Menu_t),
	member procedure deleteLinkListMenu(RefMenu1 REF Menu_t),
	member procedure updateLinkListMenu(RefMenu1 REF Menu_t, RefMenu2 REF Menu_t)
);
/
			/* Elément Type CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE Crepe_sucree_t UNDER Crepe_t(
	STATIC FUNCTION getCrepeSu(idCrepe1 IN NUMBER) RETURN Crepe_sucree_t,
	STATIC FUNCTION getAlimentsSu(idCrepe1 in NUMBER) RETURN setAliments_t,
	STATIC FUNCTION getMenusSu(idCrepe1 in NUMBER) RETURN setMenus_t,
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t),
	member procedure addLinkListMenus(RefMenu1 REF Menu_t)
);
/
			/* Elément Type CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE Fournisseur_t AS OBJECT(
	idFournisseur	NUMBER(5),
	nom				VARCHAR2(25),
	adresse			VARCHAR2(50),
	telephone		VARCHAR2(14),
	listRefAli		listRefAliments_t,
	STATIC FUNCTION getFournisseur(idFournisseur1 IN NUMBER) RETURN Fournisseur_t,
	STATIC FUNCTION getAlimentsFournis(idFournisseur1 IN NUMBER) RETURN setAliments_t,
	MAP MEMBER FUNCTION compFournisseur RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compFournisseur, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE Cidre_t AS OBJECT(
	idCidre			NUMBER(5),
	nom				VARCHAR2(25),
	annee			NUMBER(4),
	region			VARCHAR2(25),
	listRefMenu		listRefMenus_t,
	STATIC FUNCTION getCidre(idCidre1 IN NUMBER) RETURN Cidre_t,
	MAP MEMBER FUNCTION compCidre RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compCidre, WNDS, WNPS, RNPS, RNDS),
	STATIC FUNCTION getMenusCi(idCidre1 in NUMBER) RETURN setMenus_t,
	member procedure addLinkListMenus(RefMenu1 REF Menu_t)
);
/
			/* Elément Type CIDRE_T compilé */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

CREATE TABLE Aliment OF Aliment_t(
	CONSTRAINT pk_aliment_idAliment PRIMARY KEY(idAliment),
	CONSTRAINT nl_aliment_nom nom NOT NULL,
	CONSTRAINT nl_aliment_typeAliment typeAliment NOT NULL,
    CONSTRAINT chk_aliment_typeAliment check (typeAliment in ('fruit','légume', 'fromage', 'viande', 'condiment')),
	CONSTRAINT uc_aliment UNIQUE (nom)
);
			/* Table ALIMENT créé(e). */

CREATE TABLE Crepe_salee OF Crepe_salee_t(
	CONSTRAINT pk_crepe_salee_idCrepe PRIMARY KEY(idCrepe),
	CONSTRAINT nl_crepe_salee_vegetarienne vegetarienne NOT NULL,
	CONSTRAINT chk_crepe_salee_vegetarienne check (vegetarienne in ('Y','N'))
)
nested TABLE ListRefAli store AS storeListRefAliSa,
nested TABLE ListRefMenu store AS storeListRefMenuSa;
			/* Table CREPE_SALEE créé(e). */

CREATE TABLE Crepe_sucree OF Crepe_sucree_t(
	CONSTRAINT pk_crepe_sucree_idCrepe PRIMARY KEY(idCrepe)
)
nested TABLE ListRefAli store AS storeListRefAliSu,
nested TABLE ListRefMenu store AS storeListRefMenuSu;
			/* Table CREPE_SUCREE créé(e). */

CREATE TABLE Fournisseur OF Fournisseur_t(
	CONSTRAINT pk_fournisseur_idFournisseur PRIMARY KEY(idFournisseur),
	CONSTRAINT nl_fournisseur_nom nom NOT NULL,
	CONSTRAINT nl_fournisseur_telephone telephone NOT NULL
)
nested TABLE ListRefAli store AS storeListRefAliFo;
			/* Table FOURNISSEUR créé(e). */

CREATE TABLE Cidre OF Cidre_t(
	CONSTRAINT pk_cidre_idCidre PRIMARY KEY(idCidre),
	CONSTRAINT nl_cidre_nom nom NOT NULL,
	CONSTRAINT nl_cidre_annee annee NOT NULL,
	CONSTRAINT nl_cidre_region region NOT NULL	
)
nested TABLE ListRefMenu store AS storeListRefMenuCidre;
			/* Table CIDRE créé(e). */
			
CREATE TABLE Menu OF Menu_t(
	CONSTRAINT pk_menu_idMenu PRIMARY KEY(idMenu),
	CONSTRAINT nl_menu_intitule intitule NOT NULL
)
nested TABLE listRefDates store AS storeListRefDatesMenu;
			/* Table MENU créé(e). */

CREATE TABLE Date_menu OF Date_menu_t(
	CONSTRAINT pk_date_menu_dateJour PRIMARY KEY(dateJour)
);
			/* Table DATE_MENU créé(e). */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Alter TABLE storeListRefAliSa
	ADD (SCOPE FOR (column_value) IS Aliment);
			/* Table STORELISTREFALISA modifié(e). */

Alter TABLE storeListRefMenuSa
	ADD (SCOPE FOR(column_value) IS Menu);
			/* Table STORELISTREFMENUSA modifié(e). */
	
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

CREATE OR REPLACE TYPE BODY Aliment_t AS
	MAP MEMBER FUNCTION compAliment RETURN VARCHAR2 IS
	BEGIN
		RETURN typeAliment||nom||region;
	END;
	
	STATIC FUNCTION getAliment(idAliment1 IN NUMBER) RETURN Aliment_t IS
			alim aliment_t:=null;
		BEGIN
			SELECT value(al) into alim from Aliment al where al.idAliment=idAliment1;
			RETURN alim;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
END;
/
			/* Elément Type Body ALIMENT_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_t AS
	MAP MEMBER FUNCTION compCrepe RETURN VARCHAR2 IS
	BEGIN
		RETURN intitule;
	END;
END;
/
			/* Elément Type Body CREPE_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_salee_t AS
	STATIC FUNCTION getCrepeSa(idCrepe1 IN NUMBER) RETURN Crepe_salee_t IS
			crepesa crepe_salee_t:=null;
		BEGIN
			SELECT value(cs) into crepesa from Crepe_salee cs where cs.idCrepe=idCrepe1;
			RETURN crepesa;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getAlimentsSa(idCrepe1 in NUMBER) RETURN setAliments_t IS
		setAli setAliments_t:=null;
	BEGIN
		SELECT cast(collect(value(al)) AS setAliments_t) into setAli
		FROM Crepe_salee cs, TABLE(cs.listRefAli) al
		WHERE cs.idCrepe = idCrepe1;
		RETURN setAli;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	STATIC FUNCTION getMenusSa(idCrepe1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCrepeSal.idCrepe = idCrepe1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) 
			values (refAlim1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure deleteLinkListAlim(RefAlim1 REF Aliment_t) IS
		BEGIN
			delete from
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			where ts.column_value = refAlim1;
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
	
	member procedure updateLinkListAlim(RefAlim1 REF Aliment_t,RefAlim2 REF Aliment_t) IS
		BEGIN
			update
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			set ts.column_value = RefAlim2
			where ts.column_value = RefAlim1;
		end;
		
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure deleteLinkListMenu(RefMenu1 REF Menu_t) IS
		BEGIN
			delete from
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			where ts.column_value = refMenu1;
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure updateLinkListMenu(RefMenu1 REF Menu_t,RefMenu2 REF Menu_t) IS
		BEGIN
			update
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			set ts.column_value = RefMenu2
			where ts.column_value = RefMenu1;
		end;
END;
/
			/* Elément Type Body CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_sucree_t AS
	STATIC FUNCTION getCrepeSu(idCrepe1 IN NUMBER) RETURN Crepe_sucree_t IS
			crepesu crepe_sucree_t:=null;
		BEGIN
			SELECT value(cs) into crepesu from Crepe_sucree cs where cs.idCrepe=idCrepe1;
			RETURN crepesu;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getAlimentsSu(idCrepe1 in NUMBER) RETURN setAliments_t IS
		setAli setAliments_t:=setAliments_t();
	BEGIN
		SELECT cast(collect(value(al)) AS setAliments_t) into setAli
		FROM Crepe_sucree cs, TABLE(cs.listRefAli) al
		WHERE cs.idCrepe = idCrepe1;
		RETURN setAli;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	STATIC FUNCTION getMenusSu(idCrepe1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCrepeSuc.idCrepe = idCrepe1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefAli from Crepe_sucree cs where cs.idCrepe=self.idCrepe) 
			values (refAlim1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
	
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=self.idCrepe) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
END;
/
			/* Elément Type Body CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE BODY Fournisseur_t AS
	STATIC FUNCTION getFournisseur(idFournisseur1 IN NUMBER) RETURN Fournisseur_t IS
			fourni Fournisseur_t:=null;
		BEGIN
			SELECT value(fs) into fourni from Fournisseur fs where fs.idFournisseur=idFournisseur1;
			RETURN fourni;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
		
	STATIC FUNCTION getAlimentsFournis(idFournisseur1 IN NUMBER) RETURN setAliments_t IS
		setAlim setAliments_t:=null;
		BEGIN
			SELECT cast(collect(value(al)) AS setAliments_t) INTO setAlim
			from Aliment al where al.refFournisseur.idFournisseur=idFournisseur1;
			RETURN setAlim;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
			null;
		end;

	MAP MEMBER FUNCTION compFournisseur RETURN VARCHAR2 IS
	BEGIN
		RETURN nom;
	END;	
END;
/
			/* Elément Type Body FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE BODY Cidre_t AS
	STATIC FUNCTION getCidre(idCidre1 IN NUMBER) RETURN Cidre_t IS
			cidre Cidre_t:=null;
		BEGIN
			SELECT value(cd) into cidre from Cidre cd where cd.idCidre=idCidre1;
			RETURN cidre;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	MAP MEMBER FUNCTION compCidre RETURN VARCHAR2 IS
	BEGIN
		RETURN nom||annee;
	END;
	
	STATIC FUNCTION getMenusCi(idCidre1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCidre.idCidre = idCidre1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT c.listRefMenu from Cidre c where c.idCidre=self.idCidre) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
END;
/
			/* Elément Type Body CIDRE_T compilé */

CREATE OR REPLACE TYPE BODY Menu_t AS
	STATIC FUNCTION getMenu(idMenu1 IN NUMBER) RETURN Menu_t IS
			men Menu_t:=null;
		BEGIN
			SELECT value(me) into men from Menu me where me.idMenu=idMenu1;
			RETURN men;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getDates(idMenu1 in NUMBER) RETURN dates_t IS
			dat dates_t := dates_t();
		BEGIN
			SELECT cast(collect(d.column_value.dateJour) AS dates_t) into dat
			FROM TABLE(SELECT m.listRefDates FROM menu m WHERE m.idMenu = idMenu1) d;
			RETURN dat;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		END;
	
	MAP MEMBER FUNCTION compMenu RETURN VARCHAR2 IS
		BEGIN
			RETURN intitule;
		END;
END;
/
			/* Elément Type Body MENU_T compilé */

CREATE OR REPLACE TYPE BODY Date_menu_t AS
	MAP MEMBER FUNCTION compDate RETURN DATE IS
		BEGIN
			RETURN dateJour;
		END;
	
	STATIC FUNCTION getMenus(dateJour1 in date) RETURN setMenus_t IS 
			setMen setMenus_t := setMenus_t();
		BEGIN
			SELECT cast(collect(value(m)) AS setMenus_t) into setMen
			FROM menu m, TABLE(m.listRefDates) d
			WHERE d.column_value.dateJour = dateJour1;
			RETURN setMen;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		END;
END;
/
			/* Elément Type Body DATE_MENU_T compilé */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
declare
	refAlim1 REF Aliment_t;
	refAlim2 REF Aliment_t;
	refAlim3 REF Aliment_t;
	refAlim4 REF Aliment_t;
	refAlim5 REF Aliment_t;
	refAlim6 REF Aliment_t;
	refAlim7 REF Aliment_t;
	refAlim8 REF Aliment_t;
	refAlim9 REF Aliment_t;
	refAlim10 REF Aliment_t;
	refAlim11 REF Aliment_t;
	refAlim12 REF Aliment_t;
	refAlim13 REF Aliment_t;
	refAlim14 REF Aliment_t;
	refAlim15 REF Aliment_t;
	refAlim16 REF Aliment_t;
	refAlim17 REF Aliment_t;
	refAlim18 REF Aliment_t;
	refAlim19 REF Aliment_t;
	
	refCrepSa1 REF Crepe_salee_t;
	refCrepSa2 REF Crepe_salee_t;
	refCrepSa3 REF Crepe_salee_t;
	
	refCrepSu1 REF Crepe_sucree_t;
	refCrepSu2 REF Crepe_sucree_t;
	refCrepSu3 REF Crepe_sucree_t;
	
	refCidre1 REF Cidre_t;
	refCidre2 REF Cidre_t;
	refCidre3 REF Cidre_t;
	
	refFourni1 REF Fournisseur_t;
	refFourni2 REF Fournisseur_t;
	refFourni3 REF Fournisseur_t;
	refFourni4 REF Fournisseur_t;
	
	refMenu1 REF Menu_t;
	refMenu2 REF Menu_t;
	refMenu3 REF Menu_t;
	
	refDat1 REF Date_menu_t;
	refDat2 REF Date_menu_t;
	refDat3 REF Date_menu_t;
BEGIN
	-- insertion des crêpes salées
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(1, 'La Fromagère', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(),'Y'))
	returning ref(cs) into refCrepSa1;
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(2, 'La Basquaise', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(), 'N'))
	returning ref(cs) into refCrepSa2;
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(3, 'La Landaise', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(), 'N'))
	returning ref(cs) into refCrepSa3;
	
	-- insertion des crêpes sucrées
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(1, 'Nadine', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu1;
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(2, 'Amandine', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu2;
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(3, 'Hélène', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu3;
	
	-- insertion des fournisseurs
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(1, 'Roger et Fils', '3 rue des 4 vaches à lait 33500 Libourne', '05.51.23.67.84', listRefAliments_t()))
	returning ref(f) into refFourni1;
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(2, 'Oeufs et compagnie', '15 avenue richard boulit 40220 Tarnos', '05.64.87.61.63', listRefAliments_t()))
	returning ref(f) into refFourni2;
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(3, 'Bio et Co', '2 rue robespierre 64210 Biarritz', '05.59.47.65.24', listRefAliments_t()))
	returning ref(f) into refFourni3; 
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(4, 'Condi Ment', '4 avenue Charles Edouard 64600 Anglet','05.59.67.64.61', listRefAliments_t()))
	returning ref(f) into refFourni4;
	
	-- insertion des aliments
	INSERT INTO Aliment al VALUES(Aliment_t(1, 'Oeufs', 'Landes', 250, 'viande', refFourni2))
	returning ref(al) into refAlim1;
	INSERT INTO Aliment al VALUES(Aliment_t(2, 'Gruyère', 'Landes', 200, 'fromage', refFourni2))
	returning ref(al) into refAlim2;
	INSERT INTO Aliment al VALUES(Aliment_t(3, 'Sucre', 'Pays Basque', 150, 'condiment', refFourni4))
	returning ref(al) into refAlim3;
	INSERT INTO Aliment al VALUES(Aliment_t(4, 'Farine de Sarrazin', 'Pays Basque', 500, 'condiment', refFourni4))
	returning ref(al) into refAlim4;
	INSERT INTO Aliment al VALUES(Aliment_t(5, 'Tomates', 'Pays Basque', 250, 'fruit', refFourni3))
	returning ref(al) into refAlim5;
	INSERT INTO Aliment al VALUES(Aliment_t(6, 'Lardons', 'Gironde', 75, 'viande', refFourni1))
	returning ref(al) into refAlim6;
	INSERT INTO Aliment al VALUES(Aliment_t(7, 'Jambon sec', 'Gironde', 200, 'viande', refFourni1))
	returning ref(al) into refAlim7;
	INSERT INTO Aliment al VALUES(Aliment_t(8, 'Fromage de brebis', 'Landes', 75, 'fromage', refFourni2))
	returning ref(al) into refAlim8;
	INSERT INTO Aliment al VALUES(Aliment_t(9, 'Fromage de chèvre', 'Landes', 75, 'fromage', refFourni2))
	returning ref(al) into refAlim9;
	INSERT INTO Aliment al VALUES(Aliment_t(10, 'Poires', 'Pays Basque', 50, 'fruit', refFourni3))
	returning ref(al) into refAlim10;
	INSERT INTO Aliment al VALUES(Aliment_t(11, 'Pignons de pin', 'Pays Basque', 15, 'condiment', refFourni4))
	returning ref(al) into refAlim11;
	INSERT INTO Aliment al VALUES(Aliment_t(12, 'Chorizo', 'Gironde', 25, 'viande', refFourni1))
	returning ref(al) into refAlim12;
	INSERT INTO Aliment al VALUES(Aliment_t(13, 'Salade', 'Pays Basque', 50, 'légume', refFourni3))
	returning ref(al) into refAlim13;
	INSERT INTO Aliment al VALUES(Aliment_t(14, 'Oignons', 'Pays Basque', 30, 'légume', refFourni3))
	returning ref(al) into refAlim14;
	INSERT INTO Aliment al VALUES(Aliment_t(15, 'Chocolat', 'Pays Basque', 20, 'condiment', refFourni4))
	returning ref(al) into refAlim15;
	INSERT INTO Aliment al VALUES(Aliment_t(16, 'Glace chocoloat', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim16;
	INSERT INTO Aliment al VALUES(Aliment_t(17, 'Glace vanille', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim17;
	INSERT INTO Aliment al VALUES(Aliment_t(18, 'Chantilly', 'Landes', 15, 'condiment', refFourni2))
	returning ref(al) into refAlim18; 
	INSERT INTO Aliment al VALUES(Aliment_t(19, 'Amandes', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim19;

	-- insertion des cidres
	INSERT INTO Cidre c VALUES(Cidre_t(1, 'Cidre basque', 2010, 'Pays Basque', listRefMenus_t()))
	returning ref(c) into refCidre1;
	INSERT INTO Cidre c VALUES(Cidre_t(2, 'Cidre basque', 2008, 'Pays Basque', listRefMenus_t()))
	returning ref(c) into refCidre2;
	INSERT INTO Cidre c VALUES(Cidre_t(3, 'Cidre breton', 2015, 'Bretagne', listRefMenus_t()))
	returning ref(c) into refCidre3;

	-- insertion des dates
	INSERT INTO Date_menu d Values(Date_menu_t('18/03/2014'))
	returning ref(d) into refDat1;
	INSERT INTO Date_menu d Values(Date_menu_t('04/11/2017'))
	returning ref(d) into refDat2;
	INSERT INTO Date_menu d Values(Date_menu_t('11/07/2015'))
	returning ref(d) into refDat3;
	
	-- insertion des menus
	INSERT INTO Menu me VALUES(Menu_t(1, 'Le gourmand', refCrepSa1, refCrepSu1, refCidre1, listRefDates_t()))
	returning ref(me) into refMenu1;
	INSERT INTO Menu me VALUES(Menu_t(2, 'Le petit basque', refCrepSa2, refCrepSu2, refCidre2, listRefDates_t()))
	returning ref(me) into refMenu2;
	INSERT INTO Menu me VALUES(Menu_t(3, 'Le voyageur', refCrepSa3, refCrepSu3, refCidre3, listRefDates_t()))
	returning ref(me) into refMenu3;
	
		
	-- mise à jour de la liste des références vers les aliments de chaque crêpes salées
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim2);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim8);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim9);
	
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim5);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim11);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim12);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim14);
	
	-- A faire : rajouter les liens pour la crepe n°3
	
	-- mise à jour de la liste des références vers les menus de chaque crêpes salées
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=3)
	values (refMenu3);
	
	-- mise à jour de la liste des références vers les aliments de chaque crêpes sucrées
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim15);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim10);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim18);
	
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim17);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim19);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim18);
	
	-- mise à jour de la liste des références vers les menus de chaque crêpes sucrées
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=3)
	values (refMenu3);
	
	-- mise à jour de la liste des références vers les menus de chaque cidre
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=3)
	values (refMenu3);	
	
	-- mise à jour de la liste des références vers les aliments de chaque fournisseur
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim6);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim7);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim12);
	
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim1);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim2);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim8);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim9);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim18);
	
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim5);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim10);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim13);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim14);
		
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim3);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim4);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim11);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim15);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim16);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim17);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim19);
	
	-- mise à jour de la liste des références vers les dates de chaque menu
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 1)
	values (refDat1);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 1)
	values (refDat3);
	
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat1);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat2);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat3);
	
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 3)
	values (refDat2);
		
end;
/
			/* Procédure PL/SQL terminée. */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

-- test des fonctions ADDLINK
declare 
	crepesalee crepe_salee_t;
	crepesucree crepe_sucree_t;
	alimSu aliment_t := aliment_t(21, 'Pommes', 'Pyrenees-Orientales', 20, 'fruit', null);
	alimSa aliment_t := aliment_t(20, 'Poivron rouge', 'Landes', 25, 'légume', null);
	
	refAlim REF Aliment_t;
	refCrepeSa REF Crepe_salee_t;
	refCrepeSu REF Crepe_sucree_t;
BEGIN 
	SELECT ref(cs), value(cs) into refCrepeSa, crepesalee
	from crepe_salee cs where cs.idCrepe = 3;	
		
	INSERT INTO Aliment al
	values (alimSa) returning ref(al) into refAlim;
	
	crepesalee.addLinkListAliments(refAlim);
	
	SELECT ref(cs), value(cs) into refCrepeSu, crepesucree
	from crepe_sucree cs where cs.idCrepe = 1;	
		
	INSERT INTO Aliment al
	values (alimSu) returning ref(al) into refAlim;
	
	crepesucree.addLinkListAliments(refAlim);
	
	EXCEPTION
		WHEN OTHERS THEN
			dbms_output.put_line('sqlcode= '||sqlcode);
			dbms_output.put_line('sqlerrm= '||sqlerrm);
	
end;
/
			/* Procédure PL/SQL terminée. */

-- test des fonctions DELETELINK
declare 
	aliment Aliment_t;
	refAlim REF Aliment_t;

BEGIN
	SELECT ref(al), value(al) into refAlim, aliment
	from Aliment al where al.idAliment = 20;
	
	
	EXCEPTION
		WHEN OTHERS THEN
			dbms_output.put_line('sqlcode= '||sqlcode);
			dbms_output.put_line('sqlerrm= '||sqlerrm);
end;
/

-- test des fonctions GET
set serveroutput on
declare 
	alim aliment_t;
	crepeSa crepe_salee_t;
	crepeSu crepe_sucree_t;
	fourn fournisseur_t;
	cid cidre_t;
	men menu_t;
	setMenu setMenus_t;
	dat dates_t;
	setAlim setAliments_t;
BEGIN
	dbms_output.put_line('Aliment 3');
	alim := aliment_t.getAliment(3);
	dbms_output.put_line('Nom = ' || alim.nom);
	dbms_output.put_line('Stock = ' || alim.poids || 'kg');
	dbms_output.put_line('Région = ' || alim.region);
	dbms_output.put_line('Type = ' || alim.typeAliment);
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Crèpe salée 1');
	crepeSa := crepe_salee_t.getCrepeSa(1);
	dbms_output.put_line('Intitulé = ' || crepeSa.intitule);
	dbms_output.put_line('Recette = ' || crepeSa.recette);
	dbms_output.put_line('Végétarienne = ' || crepeSa.vegetarienne);
	DBMS_OUTPUT.NEW_LINE;
		
	dbms_output.put_line('Crèpe sucrée 2');
	crepeSu := crepe_sucree_t.getCrepeSu(2);
	dbms_output.put_line('Intitulé = ' || crepeSu.intitule);
	dbms_output.put_line('Recette = ' || crepeSu.recette);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Fournisseur 3');
	fourn := fournisseur_t.getFournisseur(3);
	dbms_output.put_line('Nom = ' || fourn.nom);
	dbms_output.put_line('Adresse = ' || fourn.adresse);
	dbms_output.put_line('Téléphone = ' || fourn.telephone);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Cidre 1');
	cid := cidre_t.getCidre(1);
	dbms_output.put_line('Nom = ' || cid.nom);
	dbms_output.put_line('Année = ' || cid.annee);
	dbms_output.put_line('Région = ' || cid.region);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Menu 2');
	men := menu_t.getMenu(2);
	dbms_output.put_line('Intitulé = ' || men.intitule);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Crèpe salée 2 > Menus');
	setMenu:=crepe_salee_t.getMenusSa(2);
	For i IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(i).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Crèpe sucrée 1 > Menus');
	setMenu:=crepe_sucree_t.getMenusSu(1);
	For j IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(j).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Cidre 1 > Menus');
	setMenu:=Cidre_t.getMenusCi(1);
	For k IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(k).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Menus 1 > Dates');
	dat := Menu_t.getDates(1);
	For l IN dat.FIRST..dat.LAST LOOP
		dbms_output.put_line('Date = ' || dat(l));
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Date 11/07/2015 > Menus');
	setMenu := Date_menu_t.getMenus('11/07/2015');
	For m IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(m).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Fournisseur 3 > Aliments');
	setAlim:=Fournisseur_t.getAlimentsFournis(3);
	For n IN setAlim.FIRST..setAlim.LAST LOOP
		dbms_output.put_line('Nom aliment = ' || setAlim(n).nom);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE;
	
	EXCEPTION 
		WHEN NO_DATA_FOUND then
		dbms_output.put_line('PAS d''employés avec ce numéro');
		dbms_output.put_line('sqlcode= '||sqlcode);
		dbms_output.put_line('sqlerrm= ' ||sqlerrm);
	
	
end;
/
			/* Aliment 3
			Nom = Sucre
			Stock = 200kg
			Région = Pays Basque
			Type = condiment

			Crèpe salée 1
			Intitulé = La Fromagère
			Recette = 
			Végétarienne = Y

			Crèpe sucrée 2
			Intitulé = Amandine
			Recette = 

			Fournisseur 3
			Nom = Bio et Co
			Adresse = 2 rue robespierre 64210 Biarritz
			Téléphone = 05.59.47.65.24

			Cidre 1
			Nom = Cidre basque
			Année = 2010
			Région = Pays Basque

			Menu 2
			Intitulé = Le petit basque

			Crèpe salée 2 > Menus
			Intitulé = Le petit basque

			Crèpe sucrée 1 > Menus
			Intitulé = Le gourmand

			Cidre 1 > Menus
			Intitulé = Le gourmand



			Procédure PL/SQL terminée. */


			
			
/*
2. Organisation physique de la base sous Oracle 11g (2 jours)

En partant des tables objets et des indexes définis précédemment, vous procédérez dans cette
étape à l’organisation physique de la base de données.

Vous devez donc assurerer les tâches suivantes :
	o Créer un utilisateur de votre choix qui sera propriétaire de votre application. Les
		segments temporaires doivent être localisés dans le tablespace approprié créé
		précédement. Vous devez lui donner les droits appropriés.
*/

CREATE USER proprio IDENTIFIED BY mdp;
GRANT ALL PRIVILEGES TO proprio WITH ADMIN OPTION;
GRANT UNLIMITED TABLESPACE TO proprio;
/* User PROPRIO créé(e).
Succès de l'élément Grant. */

/*
o Estimer avec DBMS_SPACE la volumétrie de vos tables et index
	 Vous dimensionnerez de façon pertinente les segments. Pour cela vous devez
		utiliser le package DBMS_SPACE pour estimer la volumétrie de vos tables et
		de vos indexes afin de trouver le volume de données nécessaire dès la création
		de ces segments. Il est important d’estimer le nombre total de lignes de chacune
		de vos tables
*/

SELECT table_name, avg_row_len from user_tables;

SET serveroutput ON
DECLARE
	v_used_bytes NUMBER(10);
	v_Allocated_Bytes NUMBER(10);
BEGIN
	-- TABLE MENU
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 50, 
		ROW_COUNT => 500, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Menu Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Menu Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));
	
	-- TABLE DATE_MENU
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 25, 
		ROW_COUNT => 5000, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Date_Menu Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Date_Menu Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));
	
	-- TABLE ALIMENT
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 52, 
		ROW_COUNT => 200, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Aliment Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Aliment Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));
	
	-- TABLE CREPE_SALEE
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 172,  
		ROW_COUNT => 100, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Crepe_Salee Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Crepe_Salee Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));
	
	-- TABLE CREPE_SUCREE
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 165,  
		ROW_COUNT => 100, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Crepe_Sucree Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Crepe_Sucree Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));

	-- TABLE FOURNISSEUR
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 104,  
		ROW_COUNT => 300, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Fournisseur Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Fournisseur Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));	
	
	-- TABLE CIDRE
	DBMS_SPACE.CREATE_TABLE_COST( 
		TABLESPACE_NAME => 'USERS', 
		AVG_ROW_SIZE => 65,  
		ROW_COUNT => 1000, 
		PCT_FREE => 10, 
		USED_BYTES => v_used_Bytes,
		ALLOC_BYTES => v_Allocated_Bytes );
	DBMS_OUTPUT.PUT_LINE('Cidre Table Used Bytes: ' || TO_CHAR(v_used_Bytes) || ' ; Cidre Table Allocated Bytes: ' || TO_CHAR(v_Allocated_Bytes));	
END;
/
/*Menu Table Used Bytes: 32768 ; Menu Table Allocated Bytes: 65536
Date_Menu Table Used Bytes: 163840 ; Date_Menu Table Allocated Bytes: 196608
Aliment Table Used Bytes: 16384 ; Aliment Table Allocated Bytes: 65536
Crepe_Salee Table Used Bytes: 24576 ; Crepe_Salee Table Allocated Bytes: 65536
Crepe_Sucree Table Used Bytes: 24576 ; Crepe_Sucree Table Allocated Bytes: 65536
Fournisseur Table Used Bytes: 40960 ; Fournisseur Table Allocated Bytes: 65536
Cidre Table Used Bytes: 81920 ; Cidre Table Allocated Bytes: 131072


Procédure PL/SQL terminée.*/

/*
o Créer les tablespaces suivants et expliquer leur intérêt:
	 Un ou plusieurs tabespaces pour stocker les données des tables.
	 Un ou plusieurs tablespaces pour stocker les données d’indexes
	 Un tablespace pour stocker les segments temporaires.
Note : Tous vos tablespaces seront gérés localement. Ils seront en mode
AUTOALLOCATE ou UNIFORM SIZE. Vous devez expliquer l’intérêt et les
bénéfices de vos choix.
*/

DROP TABLESPACE table_space_data_tables INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE table_space_data_indexes INCLUDING CONTENTS AND DATAFILES;
DROP TABLESPACE table_space_temporary INCLUDING CONTENTS AND DATAFILES;

CREATE TABLESPACE table_space_data_tables DATAFILE '%ORACLE_BASE%\oradata\data_tables.dbf' SIZE 8M EXTENT MANAGEMENT LOCAL AUTOALLOCATE;
-- TABLESPACE TABLE_SPACE_DATA_TABLES créé(e).
CREATE TABLESPACE table_space_data_indexes DATAFILE '%ORACLE_BASE%\oradata\data_indexes.dbf' SIZE 2M EXTENT MANAGEMENT LOCAL AUTOALLOCATE;
-- TABLESPACE TABLE_SPACE_DATA_INDEXES créé(e).
CREATE TEMPORARY TABLESPACE table_space_temporary TEMPFILE '%ORACLE_BASE%\oradata\temporary.dbf' SIZE 2M EXTENT MANAGEMENT LOCAL;
-- TABLESPACE TABLE_SPACE_TEMPORARY créé(e).

/*
Autoallocate : bd gère automatiquement l'extension des tables -> bon choix quand beaucoup d'extensions et facilité des gestions d'espace
Uniform size : les extensions sont uniformes et de taille spécifiée -> contrôler l'espace et ne pas gaspiller d'espace
*/ 

/*
o Réorganiser physiquement vos tables objets et leurs indexes en prenant en compte
les tablespaces créés et la volumétrie
*/

DROP TABLE Crepe_salee cascade CONSTRAINT;
			/* Table CREPE_SALEE supprimé(e). */
DROP TABLE Crepe_sucree cascade CONSTRAINT;
			/* Table CREPE_SUCREE supprimé(e). */
DROP TABLE Aliment cascade CONSTRAINT;
			/* Table ALIMENT supprimé(e). */
DROP TABLE Fournisseur cascade CONSTRAINT;
			/* Table FOURNISSEUR supprimé(e). */
DROP TABLE Cidre cascade CONSTRAINT;
			/* Table CIDRE supprimé(e). */
DROP TABLE Menu cascade CONSTRAINT;
			/* Table MENU supprimé(e). */
DROP TABLE Date_menu cascade CONSTRAINT;
			/* Table DATE_MENU supprimé(e). */

DROP TYPE Crepe_t force;
/
			/* Type CREPE_T supprimé(e). */
DROP TYPE Crepe_salee_t force;
/
			/* Type CREPE_SALEE_T supprimé(e). */
DROP TYPE Crepe_sucree_t force;
/
			/* Type CREPE_SUCREE_T supprimé(e). */
DROP TYPE Aliment_t force;
/
			/* Type ALIMENT_T supprimé(e). */
DROP TYPE Fournisseur_t force;
/
			/* Type FOURNISSEUR_T supprimé(e). */
DROP TYPE Cidre_t force;
/
			/* Type CIDRE_T supprimé(e). */
DROP TYPE Menu_t force;
/
			/* Type MENU_T supprimé(e). */
DROP TYPE Date_menu_t force;
/
			/* Type DATE_MENU_T supprimé(e). */
DROP TYPE listRefMenus_t force;
/
			/* Type LISTREFMENUS_T supprimé(e). */
DROP TYPE listRefAliments_t force;
/
			/* Type LISTREFALIMENTS_T supprimé(e). */
DROP TYPE listRefDates_t force;
/
			/* Type LISTREFDATES_T supprimé(e). */
DROP TYPE dates_t force;
/

CREATE TYPE date_menu_t;
/
			/* Elément Type DATE_MENU_T compilé */
CREATE TYPE listRefDates_t AS TABLE OF REF date_menu_t;
/
			/* Elément Type LISTREFDATES_T compilé */
Create TYPE dates_t As TABLE OF date;
/
			
CREATE OR REPLACE TYPE Crepe_salee_t;
/
			/* Elément Type CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE Crepe_sucree_t;
/
			/* Elément Type CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE Cidre_t;
/
			/* Elément Type CIDRE_T compilé */

CREATE OR REPLACE TYPE Fournisseur_t;
/
			/* Elément Type FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE Menu_t AS OBJECT(
	idMenu			NUMBER(5),
	intitule        VARCHAR2(25),
	refCrepeSal		REF Crepe_salee_t,
	refCrepeSuc		REF Crepe_sucree_t,
	refCidre		REF Cidre_t,
	listRefDates    listRefDates_t,
	STATIC FUNCTION getMenu(idMenu1 IN NUMBER) RETURN Menu_t,
	STATIC FUNCTION getDates(idMenu1 in NUMBER) RETURN dates_t,
	MAP MEMBER FUNCTION compMenu RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compMenu, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type MENU_T compilé */
Create or Replace TYPE listRefMenus_t AS TABLE OF REF Menu_t;
/
			/* Elément Type LISTREFMENUS_T compilé */
Create or Replace TYPE setMenus_t AS TABLE OF Menu_t;
/
			/* Elément Type SETMENUS_T compilé */

CREATE OR REPLACE TYPE Date_menu_t AS OBJECT(
	dateJour		date,
	STATIC FUNCTION getMenus(dateJour1 in date) RETURN setMenus_t,
	MAP MEMBER FUNCTION compDate RETURN date,
	PRAGMA RESTRICT_REFERENCES (compDate, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type DATE_MENU_T compilé */		
Create or Replace TYPE setDates_t AS TABLE OF Date_menu_t;
/
			/* Elément Type SETDATES_T compilé */

CREATE OR REPLACE TYPE Aliment_t AS OBJECT(
	idAliment		NUMBER(5),
	nom				VARCHAR2(25),
	region			VARCHAR2(25),
	poids			float(2),
	typeAliment		VARCHAR2(10),
	refFournisseur  REF Fournisseur_t,
	STATIC FUNCTION getAliment(idAliment1 IN NUMBER) RETURN Aliment_t,
	MAP MEMBER FUNCTION compAliment RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compAliment, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type ALIMENT_T compilé */
			
Create or Replace TYPE listRefAliments_t AS TABLE OF REF Aliment_t;
/
			/* Elément Type LISTREFALIMENTS_T compilé */
Create or Replace TYPE setAliments_t AS TABLE OF Aliment_t;
/
			/* Elément Type SETALIMENTS_T compilé */
			
CREATE OR REPLACE TYPE Crepe_t AS OBJECT(
	idCrepe			NUMBER(5),
	intitule		VARCHAR2(25),
	recette			CLOB,
	listRefAli		listRefAliments_t,
	listRefMenu		listRefMenus_t,
	MAP MEMBER FUNCTION compCrepe RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compCrepe, WNDS, WNPS, RNPS, RNDS)
)NOT FINAL;
/
			/* Elément Type CREPE_T compilé */
			
CREATE OR REPLACE TYPE Crepe_salee_t UNDER Crepe_t(
	vegetarienne 	char(1),
	STATIC FUNCTION getCrepeSa(idCrepe1 IN NUMBER) RETURN Crepe_salee_t,
	STATIC FUNCTION getAlimentsSa(idCrepe1 in NUMBER) RETURN setAliments_t,
	STATIC FUNCTION getMenusSa(idCrepe1 in NUMBER) RETURN setMenus_t,
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t),
	member procedure deleteLinkListAlim(RefAlim1 REF Aliment_t),
	member procedure updateLinkListAlim(RefAlim1 REF Aliment_t, RefAlim2 REF Aliment_t),
	member procedure addLinkListMenus(RefMenu1 REF Menu_t),
	member procedure deleteLinkListMenu(RefMenu1 REF Menu_t),
	member procedure updateLinkListMenu(RefMenu1 REF Menu_t, RefMenu2 REF Menu_t)
);
/
			/* Elément Type CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE Crepe_sucree_t UNDER Crepe_t(
	STATIC FUNCTION getCrepeSu(idCrepe1 IN NUMBER) RETURN Crepe_sucree_t,
	STATIC FUNCTION getAlimentsSu(idCrepe1 in NUMBER) RETURN setAliments_t,
	STATIC FUNCTION getMenusSu(idCrepe1 in NUMBER) RETURN setMenus_t,
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t),
	member procedure addLinkListMenus(RefMenu1 REF Menu_t)
);
/
			/* Elément Type CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE Fournisseur_t AS OBJECT(
	idFournisseur	NUMBER(5),
	nom				VARCHAR2(25),
	adresse			VARCHAR2(50),
	telephone		VARCHAR2(14),
	listRefAli		listRefAliments_t,
	STATIC FUNCTION getFournisseur(idFournisseur1 IN NUMBER) RETURN Fournisseur_t,
	STATIC FUNCTION getAlimentsFournis(idFournisseur1 IN NUMBER) RETURN setAliments_t,
	MAP MEMBER FUNCTION compFournisseur RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compFournisseur, WNDS, WNPS, RNPS, RNDS)
);
/
			/* Elément Type FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE Cidre_t AS OBJECT(
	idCidre			NUMBER(5),
	nom				VARCHAR2(25),
	annee			NUMBER(4),
	region			VARCHAR2(25),
	listRefMenu		listRefMenus_t,
	STATIC FUNCTION getCidre(idCidre1 IN NUMBER) RETURN Cidre_t,
	MAP MEMBER FUNCTION compCidre RETURN VARCHAR2,
	PRAGMA RESTRICT_REFERENCES (compCidre, WNDS, WNPS, RNPS, RNDS),
	STATIC FUNCTION getMenusCi(idCidre1 IN NUMBER) RETURN setMenus_t,
	member PROCEDURE addLinkListMenus(RefMenu1 REF Menu_t)
);
/
			/* Elément Type CIDRE_T compilé */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

CREATE TABLE Aliment OF Aliment_t(
	CONSTRAINT pk_aliment_idAliment PRIMARY KEY(idAliment) USING INDEX TABLESPACE table_space_data_indexes,
	CONSTRAINT nl_aliment_nom nom NOT NULL,
	CONSTRAINT nl_aliment_typeAliment typeAliment NOT NULL,
    CONSTRAINT chk_aliment_typeAliment check (typeAliment in ('fruit','légume', 'fromage', 'viande', 'condiment')),
	CONSTRAINT uc_aliment UNIQUE (nom)
)
tablespace table_space_data_tables storage(initial 64K next 64K minextents 1 pctincrease 50);
			/* Table ALIMENT créé(e). */

CREATE TABLE Crepe_salee OF Crepe_salee_t(
	CONSTRAINT pk_crepe_salee_idCrepe PRIMARY KEY(idCrepe) USING INDEX TABLESPACE table_space_data_indexes,
	CONSTRAINT nl_crepe_salee_vegetarienne vegetarienne NOT NULL,
	CONSTRAINT chk_crepe_salee_vegetarienne check (vegetarienne in ('Y','N'))
)
tablespace table_space_data_tables storage(initial 64K next 64K minextents 1 pctincrease 50),
nested TABLE ListRefAli store AS storeListRefAliSa,
nested TABLE ListRefMenu store AS storeListRefMenuSa;
			/* Table CREPE_SALEE créé(e). */

CREATE TABLE Crepe_sucree OF Crepe_sucree_t(
	CONSTRAINT pk_crepe_sucree_idCrepe PRIMARY KEY(idCrepe) USING INDEX TABLESPACE table_space_data_indexes
)
tablespace table_space_data_tables storage(initial 64K next 64K minextents 1 pctincrease 50),
nested TABLE ListRefAli store AS storeListRefAliSu,
nested TABLE ListRefMenu store AS storeListRefMenuSu;
			/* Table CREPE_SUCREE créé(e). */

CREATE TABLE Fournisseur OF Fournisseur_t(
	CONSTRAINT pk_fournisseur_idFournisseur PRIMARY KEY(idFournisseur) USING INDEX TABLESPACE table_space_data_indexes,
	CONSTRAINT nl_fournisseur_nom nom NOT NULL,
	CONSTRAINT nl_fournisseur_telephone telephone NOT NULL
)
tablespace table_space_data_tables storage(initial 64K next 64K minextents 1 pctincrease 50),
nested TABLE ListRefAli store AS storeListRefAliFo;
			/* Table FOURNISSEUR créé(e). */

CREATE TABLE Cidre OF Cidre_t(
	CONSTRAINT pk_cidre_idCidre PRIMARY KEY(idCidre) USING INDEX TABLESPACE table_space_data_indexes,
	CONSTRAINT nl_cidre_nom nom NOT NULL,
	CONSTRAINT nl_cidre_annee annee NOT NULL,
	CONSTRAINT nl_cidre_region region NOT NULL	
)
tablespace table_space_data_tables storage(initial 128K next 128K minextents 1 pctincrease 50),
nested TABLE ListRefMenu store AS storeListRefMenuCidre;
			/* Table CIDRE créé(e). */
			
CREATE TABLE Menu OF Menu_t(
	CONSTRAINT pk_menu_idMenu PRIMARY KEY(idMenu) USING INDEX TABLESPACE table_space_data_indexes,
	CONSTRAINT nl_menu_intitule intitule NOT NULL
)
tablespace table_space_data_tables storage(initial 64K next 64K minextents 1 pctincrease 50),
nested TABLE listRefDates store AS storeListRefDatesMenu;
			/* Table MENU créé(e). */

CREATE TABLE Date_menu OF Date_menu_t(
	CONSTRAINT pk_date_menu_dateJour PRIMARY KEY(dateJour) USING INDEX TABLESPACE table_space_data_indexes
)
tablespace table_space_data_tables storage(initial 192K next 192K minextents 1 pctincrease 50);
			/* Table DATE_MENU créé(e). */

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

Alter TABLE storeListRefAliSa
	ADD (SCOPE FOR (column_value) IS Aliment);
			/* Table STORELISTREFALISA modifié(e). */

Alter TABLE storeListRefMenuSa
	ADD (SCOPE FOR(column_value) IS Menu);
			/* Table STORELISTREFMENUSA modifié(e). */
	
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

CREATE OR REPLACE TYPE BODY Aliment_t AS
	MAP MEMBER FUNCTION compAliment RETURN VARCHAR2 IS
	BEGIN
		RETURN typeAliment||nom||region;
	END;
	
	STATIC FUNCTION getAliment(idAliment1 IN NUMBER) RETURN Aliment_t IS
			alim aliment_t:=null;
		BEGIN
			SELECT value(al) into alim from Aliment al where al.idAliment=idAliment1;
			RETURN alim;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
END;
/
			/* Elément Type Body ALIMENT_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_t AS
	MAP MEMBER FUNCTION compCrepe RETURN VARCHAR2 IS
	BEGIN
		RETURN intitule;
	END;
END;
/
			/* Elément Type Body CREPE_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_salee_t AS
	STATIC FUNCTION getCrepeSa(idCrepe1 IN NUMBER) RETURN Crepe_salee_t IS
			crepesa crepe_salee_t:=null;
		BEGIN
			SELECT value(cs) into crepesa from Crepe_salee cs where cs.idCrepe=idCrepe1;
			RETURN crepesa;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getAlimentsSa(idCrepe1 in NUMBER) RETURN setAliments_t IS
		setAli setAliments_t:=null;
	BEGIN
		SELECT cast(collect(value(al)) AS setAliments_t) into setAli
		FROM Crepe_salee cs, TABLE(cs.listRefAli) al
		WHERE cs.idCrepe = idCrepe1;
		RETURN setAli;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	STATIC FUNCTION getMenusSa(idCrepe1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCrepeSal.idCrepe = idCrepe1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) 
			values (refAlim1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure deleteLinkListAlim(RefAlim1 REF Aliment_t) IS
		BEGIN
			delete from
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			where ts.column_value = refAlim1;
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
	
	member procedure updateLinkListAlim(RefAlim1 REF Aliment_t,RefAlim2 REF Aliment_t) IS
		BEGIN
			update
			TABLE(SELECT cs.listRefAli from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			set ts.column_value = RefAlim2
			where ts.column_value = RefAlim1;
		end;
		
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure deleteLinkListMenu(RefMenu1 REF Menu_t) IS
		BEGIN
			delete from
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			where ts.column_value = refMenu1;
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
		
	member procedure updateLinkListMenu(RefMenu1 REF Menu_t,RefMenu2 REF Menu_t) IS
		BEGIN
			update
			TABLE(SELECT cs.listRefMenu from Crepe_salee cs where cs.idCrepe=self.idCrepe) ts
			set ts.column_value = RefMenu2
			where ts.column_value = RefMenu1;
		end;
END;
/
			/* Elément Type Body CREPE_SALEE_T compilé */

CREATE OR REPLACE TYPE BODY Crepe_sucree_t AS
	STATIC FUNCTION getCrepeSu(idCrepe1 IN NUMBER) RETURN Crepe_sucree_t IS
			crepesu crepe_sucree_t:=null;
		BEGIN
			SELECT value(cs) into crepesu from Crepe_sucree cs where cs.idCrepe=idCrepe1;
			RETURN crepesu;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getAlimentsSu(idCrepe1 in NUMBER) RETURN setAliments_t IS
		setAli setAliments_t:=setAliments_t();
	BEGIN
		SELECT cast(collect(value(al)) AS setAliments_t) into setAli
		FROM Crepe_sucree cs, TABLE(cs.listRefAli) al
		WHERE cs.idCrepe = idCrepe1;
		RETURN setAli;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	STATIC FUNCTION getMenusSu(idCrepe1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCrepeSuc.idCrepe = idCrepe1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListAliments(RefAlim1 REF Aliment_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefAli from Crepe_sucree cs where cs.idCrepe=self.idCrepe) 
			values (refAlim1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
	
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=self.idCrepe) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
END;
/
			/* Elément Type Body CREPE_SUCREE_T compilé */

CREATE OR REPLACE TYPE BODY Fournisseur_t AS
	STATIC FUNCTION getFournisseur(idFournisseur1 IN NUMBER) RETURN Fournisseur_t IS
			fourni Fournisseur_t:=null;
		BEGIN
			SELECT value(fs) into fourni from Fournisseur fs where fs.idFournisseur=idFournisseur1;
			RETURN fourni;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
		
	STATIC FUNCTION getAlimentsFournis(idFournisseur1 IN NUMBER) RETURN setAliments_t IS
		setAlim setAliments_t:=null;
		BEGIN
			SELECT cast(collect(value(al)) AS setAliments_t) INTO setAlim
			from Aliment al where al.refFournisseur.idFournisseur=idFournisseur1;
			RETURN setAlim;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
			null;
		end;

	MAP MEMBER FUNCTION compFournisseur RETURN VARCHAR2 IS
	BEGIN
		RETURN nom;
	END;	
END;
/
			/* Elément Type Body FOURNISSEUR_T compilé */

CREATE OR REPLACE TYPE BODY Cidre_t AS
	STATIC FUNCTION getCidre(idCidre1 IN NUMBER) RETURN Cidre_t IS
			cidre Cidre_t:=null;
		BEGIN
			SELECT value(cd) into cidre from Cidre cd where cd.idCidre=idCidre1;
			RETURN cidre;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	MAP MEMBER FUNCTION compCidre RETURN VARCHAR2 IS
	BEGIN
		RETURN nom||annee;
	END;
	
	STATIC FUNCTION getMenusCi(idCidre1 in NUMBER) RETURN setMenus_t IS
		setMenu setMenus_t:=setMenus_t();
	BEGIN
		SELECT cast(collect(value(me)) AS setMenus_t) into setMenu
		FROM menu me
		WHERE me.refCidre.idCidre = idCidre1;
		RETURN setMenu;
		EXCEPTION	
			WHEN NO_DATA_FOUND THEN
				raise;
	END;
	
	member procedure addLinkListMenus(RefMenu1 REF Menu_t) IS
		BEGIN
			INSERT INTO
			TABLE(SELECT c.listRefMenu from Cidre c where c.idCidre=self.idCidre) 
			values (refMenu1);
			EXCEPTION 
				WHEN OTHERS THEN
				raise;
		end;
END;
/
			/* Elément Type Body CIDRE_T compilé */

CREATE OR REPLACE TYPE BODY Menu_t AS
	STATIC FUNCTION getMenu(idMenu1 IN NUMBER) RETURN Menu_t IS
			men Menu_t:=null;
		BEGIN
			SELECT value(me) into men from Menu me where me.idMenu=idMenu1;
			RETURN men;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		end;
	
	STATIC FUNCTION getDates(idMenu1 in NUMBER) RETURN dates_t IS
			dat dates_t := dates_t();
		BEGIN
			SELECT cast(collect(d.column_value.dateJour) AS dates_t) into dat
			FROM TABLE(SELECT m.listRefDates FROM menu m WHERE m.idMenu = idMenu1) d;
			RETURN dat;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		END;
	
	MAP MEMBER FUNCTION compMenu RETURN VARCHAR2 IS
		BEGIN
			RETURN intitule;
		END;
END;
/
			/* Elément Type Body MENU_T compilé */

CREATE OR REPLACE TYPE BODY Date_menu_t AS
	MAP MEMBER FUNCTION compDate RETURN DATE IS
		BEGIN
			RETURN dateJour;
		END;
	
	STATIC FUNCTION getMenus(dateJour1 in date) RETURN setMenus_t IS 
			setMen setMenus_t := setMenus_t();
		BEGIN
			SELECT cast(collect(value(m)) AS setMenus_t) into setMen
			FROM menu m, TABLE(m.listRefDates) d
			WHERE d.column_value.dateJour = dateJour1;
			RETURN setMen;
			EXCEPTION	
				WHEN NO_DATA_FOUND THEN
					raise;
		END;
END;
/
			/* Elément Type Body DATE_MENU_T compilé */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
declare
	refAlim1 REF Aliment_t;
	refAlim2 REF Aliment_t;
	refAlim3 REF Aliment_t;
	refAlim4 REF Aliment_t;
	refAlim5 REF Aliment_t;
	refAlim6 REF Aliment_t;
	refAlim7 REF Aliment_t;
	refAlim8 REF Aliment_t;
	refAlim9 REF Aliment_t;
	refAlim10 REF Aliment_t;
	refAlim11 REF Aliment_t;
	refAlim12 REF Aliment_t;
	refAlim13 REF Aliment_t;
	refAlim14 REF Aliment_t;
	refAlim15 REF Aliment_t;
	refAlim16 REF Aliment_t;
	refAlim17 REF Aliment_t;
	refAlim18 REF Aliment_t;
	refAlim19 REF Aliment_t;
	
	refCrepSa1 REF Crepe_salee_t;
	refCrepSa2 REF Crepe_salee_t;
	refCrepSa3 REF Crepe_salee_t;
	
	refCrepSu1 REF Crepe_sucree_t;
	refCrepSu2 REF Crepe_sucree_t;
	refCrepSu3 REF Crepe_sucree_t;
	
	refCidre1 REF Cidre_t;
	refCidre2 REF Cidre_t;
	refCidre3 REF Cidre_t;
	
	refFourni1 REF Fournisseur_t;
	refFourni2 REF Fournisseur_t;
	refFourni3 REF Fournisseur_t;
	refFourni4 REF Fournisseur_t;
	
	refMenu1 REF Menu_t;
	refMenu2 REF Menu_t;
	refMenu3 REF Menu_t;
	
	refDat1 REF Date_menu_t;
	refDat2 REF Date_menu_t;
	refDat3 REF Date_menu_t;
BEGIN
	-- insertion des crêpes salées
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(1, 'La Fromagère', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(),'Y'))
	returning ref(cs) into refCrepSa1;
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(2, 'La Basquaise', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(), 'N'))
	returning ref(cs) into refCrepSa2;
	INSERT INTO Crepe_salee cs VALUES(crepe_salee_t(3, 'La Landaise', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t(), 'N'))
	returning ref(cs) into refCrepSa3;
	
	-- insertion des crêpes sucrées
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(1, 'Nadine', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu1;
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(2, 'Amandine', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu2;
	INSERT INTO Crepe_sucree cs VALUES(crepe_sucree_t(3, 'Hélène', EMPTY_CLOB(), listRefAliments_t(), listRefMenus_t()))
	returning ref(cs) into refCrepSu3;
	
	-- insertion des fournisseurs
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(1, 'Roger et Fils', '3 rue des 4 vaches à lait 33500 Libourne', '05.51.23.67.84', listRefAliments_t()))
	returning ref(f) into refFourni1;
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(2, 'Oeufs et compagnie', '15 avenue richard boulit 40220 Tarnos', '05.64.87.61.63', listRefAliments_t()))
	returning ref(f) into refFourni2;
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(3, 'Bio et Co', '2 rue robespierre 64210 Biarritz', '05.59.47.65.24', listRefAliments_t()))
	returning ref(f) into refFourni3; 
	INSERT INTO Fournisseur f VALUES(Fournisseur_t(4, 'Condi Ment', '4 avenue Charles Edouard 64600 Anglet','05.59.67.64.61', listRefAliments_t()))
	returning ref(f) into refFourni4;
	
	-- insertion des aliments
	INSERT INTO Aliment al VALUES(Aliment_t(1, 'Oeufs', 'Landes', 250, 'viande', refFourni2))
	returning ref(al) into refAlim1;
	INSERT INTO Aliment al VALUES(Aliment_t(2, 'Gruyère', 'Landes', 200, 'fromage', refFourni2))
	returning ref(al) into refAlim2;
	INSERT INTO Aliment al VALUES(Aliment_t(3, 'Sucre', 'Pays Basque', 150, 'condiment', refFourni4))
	returning ref(al) into refAlim3;
	INSERT INTO Aliment al VALUES(Aliment_t(4, 'Farine de Sarrazin', 'Pays Basque', 500, 'condiment', refFourni4))
	returning ref(al) into refAlim4;
	INSERT INTO Aliment al VALUES(Aliment_t(5, 'Tomates', 'Pays Basque', 250, 'fruit', refFourni3))
	returning ref(al) into refAlim5;
	INSERT INTO Aliment al VALUES(Aliment_t(6, 'Lardons', 'Gironde', 75, 'viande', refFourni1))
	returning ref(al) into refAlim6;
	INSERT INTO Aliment al VALUES(Aliment_t(7, 'Jambon sec', 'Gironde', 200, 'viande', refFourni1))
	returning ref(al) into refAlim7;
	INSERT INTO Aliment al VALUES(Aliment_t(8, 'Fromage de brebis', 'Landes', 75, 'fromage', refFourni2))
	returning ref(al) into refAlim8;
	INSERT INTO Aliment al VALUES(Aliment_t(9, 'Fromage de chèvre', 'Landes', 75, 'fromage', refFourni2))
	returning ref(al) into refAlim9;
	INSERT INTO Aliment al VALUES(Aliment_t(10, 'Poires', 'Pays Basque', 50, 'fruit', refFourni3))
	returning ref(al) into refAlim10;
	INSERT INTO Aliment al VALUES(Aliment_t(11, 'Pignons de pin', 'Pays Basque', 15, 'condiment', refFourni4))
	returning ref(al) into refAlim11;
	INSERT INTO Aliment al VALUES(Aliment_t(12, 'Chorizo', 'Gironde', 25, 'viande', refFourni1))
	returning ref(al) into refAlim12;
	INSERT INTO Aliment al VALUES(Aliment_t(13, 'Salade', 'Pays Basque', 50, 'légume', refFourni3))
	returning ref(al) into refAlim13;
	INSERT INTO Aliment al VALUES(Aliment_t(14, 'Oignons', 'Pays Basque', 30, 'légume', refFourni3))
	returning ref(al) into refAlim14;
	INSERT INTO Aliment al VALUES(Aliment_t(15, 'Chocolat', 'Pays Basque', 20, 'condiment', refFourni4))
	returning ref(al) into refAlim15;
	INSERT INTO Aliment al VALUES(Aliment_t(16, 'Glace chocoloat', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim16;
	INSERT INTO Aliment al VALUES(Aliment_t(17, 'Glace vanille', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim17;
	INSERT INTO Aliment al VALUES(Aliment_t(18, 'Chantilly', 'Landes', 15, 'condiment', refFourni2))
	returning ref(al) into refAlim18; 
	INSERT INTO Aliment al VALUES(Aliment_t(19, 'Amandes', 'Pays Basque', 10, 'condiment', refFourni4))
	returning ref(al) into refAlim19;

	-- insertion des cidres
	INSERT INTO Cidre c VALUES(Cidre_t(1, 'Cidre basque', 2010, 'Pays Basque', listRefMenus_t()))
	returning ref(c) into refCidre1;
	INSERT INTO Cidre c VALUES(Cidre_t(2, 'Cidre basque', 2008, 'Pays Basque', listRefMenus_t()))
	returning ref(c) into refCidre2;
	INSERT INTO Cidre c VALUES(Cidre_t(3, 'Cidre breton', 2015, 'Bretagne', listRefMenus_t()))
	returning ref(c) into refCidre3;

	-- insertion des dates
	INSERT INTO Date_menu d Values(Date_menu_t('18/03/2014'))
	returning ref(d) into refDat1;
	INSERT INTO Date_menu d Values(Date_menu_t('04/11/2017'))
	returning ref(d) into refDat2;
	INSERT INTO Date_menu d Values(Date_menu_t('11/07/2015'))
	returning ref(d) into refDat3;
	
	-- insertion des menus
	INSERT INTO Menu me VALUES(Menu_t(1, 'Le gourmand', refCrepSa1, refCrepSu1, refCidre1, listRefDates_t()))
	returning ref(me) into refMenu1;
	INSERT INTO Menu me VALUES(Menu_t(2, 'Le petit basque', refCrepSa2, refCrepSu2, refCidre2, listRefDates_t()))
	returning ref(me) into refMenu2;
	INSERT INTO Menu me VALUES(Menu_t(3, 'Le voyageur', refCrepSa3, refCrepSu3, refCidre3, listRefDates_t()))
	returning ref(me) into refMenu3;
	
		
	-- mise à jour de la liste des références vers les aliments de chaque crêpes salées
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim2);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim8);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=1)
	values (refAlim9);
	
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim5);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim11);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim12);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_salee cs where cs.idCrepe=2)
	values (refAlim14);
	
	-- A faire : rajouter les liens pour la crepe n°3
	
	-- mise à jour de la liste des références vers les menus de chaque crêpes salées
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_salee cs where cs.idCrepe=3)
	values (refMenu3);
	
	-- mise à jour de la liste des références vers les aliments de chaque crêpes sucrées
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim15);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim10);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=3)
	values (refAlim18);
	
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim17);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim19);
	INSERT INTO 
	TABLE(Select cs.listRefAli from Crepe_sucree cs where cs.idCrepe=2)
	values (refAlim18);
	
	-- mise à jour de la liste des références vers les menus de chaque crêpes sucrées
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select cs.listRefMenu from Crepe_sucree cs where cs.idCrepe=3)
	values (refMenu3);
	
	-- mise à jour de la liste des références vers les menus de chaque cidre
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=1)
	values (refMenu1);
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=2)
	values (refMenu2);
	INSERT INTO 
	TABLE(Select c.listRefMenu from Cidre c where c.idCidre=3)
	values (refMenu3);	
	
	-- mise à jour de la liste des références vers les aliments de chaque fournisseur
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim6);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim7);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=1)
	values (refAlim12);
	
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim1);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim2);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim8);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim9);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=2)
	values (refAlim18);
	
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim5);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim10);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim13);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=3)
	values (refAlim14);
		
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim3);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim4);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim11);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim15);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim16);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim17);
	INSERT INTO 
	TABLE(Select fs.listRefAli from Fournisseur fs where fs.idFournisseur=4)
	values (refAlim19);
	
	-- mise à jour de la liste des références vers les dates de chaque menu
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 1)
	values (refDat1);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 1)
	values (refDat3);
	
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat1);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat2);
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 2)
	values (refDat3);
	
	INSERT INTO
	TABLE (Select m.listRefDates from Menu m where m.idMenu = 3)
	values (refDat2);
		
end;
/
			/* Procédure PL/SQL terminée. */

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

-- test des fonctions ADDLINK
declare 
	crepesalee crepe_salee_t;
	crepesucree crepe_sucree_t;
	alimSu aliment_t := aliment_t(21, 'Pommes', 'Pyrenees-Orientales', 20, 'fruit', null);
	alimSa aliment_t := aliment_t(20, 'Poivron rouge', 'Landes', 25, 'légume', null);
	
	refAlim REF Aliment_t;
	refCrepeSa REF Crepe_salee_t;
	refCrepeSu REF Crepe_sucree_t;
BEGIN 
	SELECT ref(cs), value(cs) into refCrepeSa, crepesalee
	from crepe_salee cs where cs.idCrepe = 3;	
		
	INSERT INTO Aliment al
	values (alimSa) returning ref(al) into refAlim;
	
	crepesalee.addLinkListAliments(refAlim);
	
	SELECT ref(cs), value(cs) into refCrepeSu, crepesucree
	from crepe_sucree cs where cs.idCrepe = 1;	
		
	INSERT INTO Aliment al
	values (alimSu) returning ref(al) into refAlim;
	
	crepesucree.addLinkListAliments(refAlim);
	
	EXCEPTION
		WHEN OTHERS THEN
			dbms_output.put_line('sqlcode= '||sqlcode);
			dbms_output.put_line('sqlerrm= '||sqlerrm);
	
end;
/
			/* Procédure PL/SQL terminée. */

-- test des fonctions DELETELINK
declare 
	aliment Aliment_t;
	refAlim REF Aliment_t;

BEGIN
	SELECT ref(al), value(al) into refAlim, aliment
	from Aliment al where al.idAliment = 20;
	
	
	EXCEPTION
		WHEN OTHERS THEN
			dbms_output.put_line('sqlcode= '||sqlcode);
			dbms_output.put_line('sqlerrm= '||sqlerrm);
end;
/

-- test des fonctions GET
set serveroutput on
declare 
	alim aliment_t;
	crepeSa crepe_salee_t;
	crepeSu crepe_sucree_t;
	fourn fournisseur_t;
	cid cidre_t;
	men menu_t;
	setMenu setMenus_t;
	dat dates_t;
	setAlim setAliments_t;
BEGIN
	dbms_output.put_line('Aliment 3');
	alim := aliment_t.getAliment(3);
	dbms_output.put_line('Nom = ' || alim.nom);
	dbms_output.put_line('Stock = ' || alim.poids || 'kg');
	dbms_output.put_line('Région = ' || alim.region);
	dbms_output.put_line('Type = ' || alim.typeAliment);
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Crèpe salée 1');
	crepeSa := crepe_salee_t.getCrepeSa(1);
	dbms_output.put_line('Intitulé = ' || crepeSa.intitule);
	dbms_output.put_line('Recette = ' || crepeSa.recette);
	dbms_output.put_line('Végétarienne = ' || crepeSa.vegetarienne);
	DBMS_OUTPUT.NEW_LINE;
		
	dbms_output.put_line('Crèpe sucrée 2');
	crepeSu := crepe_sucree_t.getCrepeSu(2);
	dbms_output.put_line('Intitulé = ' || crepeSu.intitule);
	dbms_output.put_line('Recette = ' || crepeSu.recette);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Fournisseur 3');
	fourn := fournisseur_t.getFournisseur(3);
	dbms_output.put_line('Nom = ' || fourn.nom);
	dbms_output.put_line('Adresse = ' || fourn.adresse);
	dbms_output.put_line('Téléphone = ' || fourn.telephone);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Cidre 1');
	cid := cidre_t.getCidre(1);
	dbms_output.put_line('Nom = ' || cid.nom);
	dbms_output.put_line('Année = ' || cid.annee);
	dbms_output.put_line('Région = ' || cid.region);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Menu 2');
	men := menu_t.getMenu(2);
	dbms_output.put_line('Intitulé = ' || men.intitule);
	DBMS_OUTPUT.NEW_LINE;
	
	dbms_output.put_line('Crèpe salée 2 > Menus');
	setMenu:=crepe_salee_t.getMenusSa(2);
	For i IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(i).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Crèpe sucrée 1 > Menus');
	setMenu:=crepe_sucree_t.getMenusSu(1);
	For j IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(j).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Cidre 1 > Menus');
	setMenu:=Cidre_t.getMenusCi(1);
	For k IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(k).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Menus 1 > Dates');
	dat := Menu_t.getDates(1);
	For l IN dat.FIRST..dat.LAST LOOP
		dbms_output.put_line('Date = ' || dat(l));
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Date 11/07/2015 > Menus');
	setMenu := Date_menu_t.getMenus('11/07/2015');
	For m IN setMenu.FIRST..setMenu.LAST LOOP
		dbms_output.put_line('Intitulé = ' || setMenu(m).intitule);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE; 
	
	dbms_output.put_line('Fournisseur 3 > Aliments');
	setAlim:=Fournisseur_t.getAlimentsFournis(3);
	For n IN setAlim.FIRST..setAlim.LAST LOOP
		dbms_output.put_line('Nom aliment = ' || setAlim(n).nom);
	END LOOP;
	DBMS_OUTPUT.NEW_LINE;
	
	EXCEPTION 
		WHEN NO_DATA_FOUND then
		dbms_output.put_line('Pas d''employés avec ce numéro');
		dbms_output.put_line('sqlcode= '||sqlcode);
		dbms_output.put_line('sqlerrm= ' ||sqlerrm);
	
	
end;
/

/* 
	Aliment 3
	Nom = Sucre
	Stock = 200kg
	Région = Pays Basque
	Type = condiment

	Crèpe salée 1
	Intitulé = La Fromagère
	Recette = 
	Végétarienne = Y

	Crèpe sucrée 2
	Intitulé = Amandine
	Recette = 

	Fournisseur 3
	Nom = Bio et Co
	Adresse = 2 rue robespierre 64210 Biarritz
	Téléphone = 05.59.47.65.24

	Cidre 1
	Nom = Cidre basque
	Année = 2010
	Région = Pays Basque

	Menu 2
	Intitulé = Le petit basque

	Crèpe salée 2 > Menus
	Intitulé = Le petit basque

	Crèpe sucrée 1 > Menus
	Intitulé = Le gourmand

	Cidre 1 > Menus
	Intitulé = Le gourmand



	Procédure PL/SQL terminée. 
*/

/*
3. Étape d'Administration (2 jours)
3.1 Sqlloader (voir le chap. 7 du cours ADB1)
Ecrire un script (fichier de contrôle SQLLOADER) qui permet de charger les lignes contenues
dans un fichier CSV (ligne à construire dans EXCEL) vers une ou plusieurs de vos tables. Les
données sont à préparer auparavant.
*/

LOAD DATA 
INFILE 'sqlloader.csv'
APPEND
INTO TABLE ALIMENT_T
FIELDS TERMINATED BY ';'
	(idAliment,
	nom,
	region,
	poids,
	typeAliment)

/*

3.2 Divers requêtes
1) Ecrire une requête SQL qui permet de visualiser l’ensemble des fichiers qui
composent votre base
*/

SELECT file_name from dba_data_files;
	/*
	/u03/app/oracle/oradata/ORCL/system02.dbf
	/u02/app/oracle/oradata/ORCL/system01.dbf
	/u03/app/oracle/oradata/ORCL/sysaux02.dbf
	/u02/app/oracle/oradata/ORCL/sysaux01.dbf
	/u02/app/oracle/oradata/ORCL/undotbs01.dbf
	/u03/app/oracle/oradata/ORCL/users02.dbf
	/u02/app/oracle/oradata/ORCL/users01.dbf
	/u02/app/oracle/oradata/ORCL/example01.dbf
	/u02/app/oracle/oradata/SP341428920_ias_opss.dbf
	/u02/app/oracle/oradata/SP341428920_mds.dbf
	/u02/app/oracle/oradata/SP341428920_wlsservices.dbf
	/u02/app/oracle/oradata/SP341428920_iau.dbf
	/u02/app/oracle/oradata/SP341428920_svctbl.dbf
	/u02/app/oracle/oradata/SP341428920_UMS.dbf
	/u02/app/oracle/oradata/SP598528613_UMS.dbf
	/u02/app/oracle/oradata/SP598528613_ias_opss.dbf
	/u02/app/oracle/oradata/SP598528613_svctbl.dbf
	/u02/app/oracle/oradata/SP598528613_mds.dbf
	/u02/app/oracle/oradata/SP598528613_iau.dbf
	/u02/app/oracle/oradata/SP598528613_wlsservices.dbf
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_table_res_1.dbf
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_index_res_1.dbf
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_lob_res_1.dbf
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tsrman_fz5l0x6b_.dbf
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tbs_inde_g4cwjpd0_.dbf
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tstables_g514dp57_.dbf
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tsindexe_g514ds1f_.dbf
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradatadata_tables.dbf
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradatadata_indexes.dbf
	*/

/*
2) Ecrire une requête SQL qui permet de lister en une requête l’ensembles des
tablespaces avec leur fichiers. La taille de chaque fichier doit apparaître, le volume
total de l’espace occupé par fichier ainsi que le volume total de l’espace libre par
fichier
*/

SELECT file_name, tablespace_name, bytes, maxbytes, maxbytes - bytes FROM dba_data_files;
	/*
	/u03/app/oracle/oradata/ORCL/system02.dbf	SYSTEM	314572800	2147483648	1832910848
	/u02/app/oracle/oradata/ORCL/system01.dbf	SYSTEM	4278190080	34359721984	30081531904
	/u03/app/oracle/oradata/ORCL/sysaux02.dbf	SYSAUX	314572800	2147483648	1832910848
	/u02/app/oracle/oradata/ORCL/sysaux01.dbf	SYSAUX	964689920	34359721984	33395032064
	/u02/app/oracle/oradata/ORCL/undotbs01.dbf	UNDOTBS1	10249830400	34359721984	24109891584
	/u03/app/oracle/oradata/ORCL/users02.dbf	USERS	314572800	2147483648	1832910848
	/u02/app/oracle/oradata/ORCL/users01.dbf	USERS	7897088000	34359721984	26462633984
	/u02/app/oracle/oradata/ORCL/example01.dbf	EXAMPLE	363069440	34359721984	33996652544
	/u02/app/oracle/oradata/SP341428920_ias_opss.dbf	SP341428920_IAS_OPSS	62914560	34359721984	34296807424
	/u02/app/oracle/oradata/SP341428920_mds.dbf	SP341428920_MDS	104857600	1048576000	943718400
	/u02/app/oracle/oradata/SP341428920_wlsservices.dbf	SP341428920_WLS	62914560	34359721984	34296807424
	/u02/app/oracle/oradata/SP341428920_iau.dbf	SP341428920_IAU	62914560	34359721984	34296807424
	/u02/app/oracle/oradata/SP341428920_svctbl.dbf	SP341428920_STB	10485760	34359721984	34349236224
	/u02/app/oracle/oradata/SP341428920_UMS.dbf	SP341428920_IAS_UMS	104857600	34359721984	34254864384
	/u02/app/oracle/oradata/SP598528613_UMS.dbf	SP598528613_IAS_UMS	104857600	34359721984	34254864384
	/u02/app/oracle/oradata/SP598528613_ias_opss.dbf	SP598528613_IAS_OPSS	62914560	34359721984	34296807424
	/u02/app/oracle/oradata/SP598528613_svctbl.dbf	SP598528613_STB	10485760	34359721984	34349236224
	/u02/app/oracle/oradata/SP598528613_mds.dbf	SP598528613_MDS	104857600	1048576000	943718400
	/u02/app/oracle/oradata/SP598528613_iau.dbf	SP598528613_IAU	62914560	34359721984	34296807424
	/u02/app/oracle/oradata/SP598528613_wlsservices.dbf	SP598528613_WLS	62914560	34359721984	34296807424
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_table_res_1.dbf	TS_TABLE_RES	10485760	0	-10485760
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_index_res_1.dbf	TS_INDEX_RES	10485760	0	-10485760
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradataorcltsobjts_lob_res_1.dbf	TS_LOB_RES	10485760	0	-10485760
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tsrman_fz5l0x6b_.dbf	TSRMAN	104857600	34359721984	34254864384
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tbs_inde_g4cwjpd0_.dbf	TBS_INDEXES	104857600	34359721984	34254864384
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tstables_g514dp57_.dbf	TSTABLES	27262976	34359721984	34332459008
	/u02/app/oracle/oradata/ORCL/datafile/o1_mf_tsindexe_g514ds1f_.dbf	TSINDEXES	9437184	34359721984	34350284800
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradatadata_tables.dbf	TABLE_SPACE_DATA_TABLES	8388608	0	-8388608
	/u01/app/oracle/product/11.2.0/dbhome_1/dbs/%ORACLE_BASE%oradatadata_indexes.dbf	TABLE_SPACE_DATA_INDEXES	2097152	0	-2097152
	*/

/*
3) Ecrire une requête SQL qui permet de lister les segments et leurs extensions de
chacun des segments (tables ou indexes) de votre utilisateur
*/

SELECT segment_name, segment_type Type, tablespace_name, extents FROM user_segments
	/*
	ALIMENT		TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFALISA	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFMENUSA	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	CREPE_SALEE	TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFALISU	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFMENUSU	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	CREPE_SUCREE	TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFALIFO	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	FOURNISSEUR	TABLE	TABLE_SPACE_DATA_TABLES	1
	STORELISTREFMENUCIDRE	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	CIDRE	TABLE	TABLE_SPACE_DATA_TABLES	2
	STORELISTREFDATESMENU	NESTED TABLE	TABLE_SPACE_DATA_TABLES	1
	MENU	TABLE	TABLE_SPACE_DATA_TABLES	1
	DATE_MENU	TABLE	TABLE_SPACE_DATA_TABLES	3
	PK_ALIMENT_IDALIMENT	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081699	INDEX	TABLE_SPACE_DATA_TABLES	1
	UC_ALIMENT	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_IL0000207645C00005$$	LOBINDEX	TABLE_SPACE_DATA_TABLES	1
	PK_CREPE_SALEE_IDCREPE	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081704	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081705	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081706	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207645N00008$	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207645N00006$	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_IL0000207656C00005$$	LOBINDEX	TABLE_SPACE_DATA_TABLES	1
	PK_CREPE_SUCREE_IDCREPE	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081708	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081709	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081710	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207656N00008$	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207656N00006$	INDEX	TABLE_SPACE_DATA_TABLES	1
	PK_FOURNISSEUR_IDFOURNISSEUR	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081714	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081715	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207667N00007$	INDEX	TABLE_SPACE_DATA_TABLES	1
	PK_CIDRE_IDCIDRE	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081720	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081721	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207673N00007$	INDEX	TABLE_SPACE_DATA_TABLES	1
	PK_MENU_IDMENU	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081724	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_C0081725	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_FK0000207679N00008$	INDEX	TABLE_SPACE_DATA_TABLES	1
	PK_DATE_MENU_DATEJOUR	INDEX	TABLE_SPACE_DATA_INDEXES	1
	SYS_C0081727	INDEX	TABLE_SPACE_DATA_TABLES	1
	SYS_LOB0000207645C00005$$	LOBSEGMENT	TABLE_SPACE_DATA_TABLES	1
	SYS_LOB0000207656C00005$$	LOBSEGMENT	TABLE_SPACE_DATA_TABLES	1
	*/

/*
4) Ecrire une requête qui permet pour chacun de vos segments de donner le nombre
total de blocs du segment, le nombre de blocs utilisés et le nombre de blocs libres
*/

SELECT sum(blocks) as Nombre_blocks, avg(blocks) as Moyenne_blocks_libres FROM dba_segments;
	-- 1645920	145,296610169491525423728813559322033898

/*
5) Ecrire une requête SQL qui permet de compacter et réduire un segment
*/

ALTER TABLE Aliment enable row movement;
	-- Table ALIMENT modifié(e).
ALTER TABLE Aliment SHRINK SPACE cascade
	-- Table ALIMENT modifié(e).

/*
6) Ecrire une requête qui permet d’afficher l’ensemble des utilisateurs de votre base et
leurs droits
*/

SELECT username,granted_role,admin_option FROM user_role_privs;
	/*
	ESCAMBERABERO2B18	RL_COURS_ADMIN	NO
	ESCAMBERABERO2B18	RL_COURS_SQL	NO
	*/

/*
7) Proposer trois requêtes libres au choix de recherche d’objets dans le dictionnaire
Oracle
*/

SELECT table_name, pct_free FROM user_tables 
	/*
	STORELISTREFALISA	10
	STORELISTREFMENUSA	10
	STORELISTREFALISU	10
	STORELISTREFMENUSU	10
	STORELISTREFALIFO	10
	STORELISTREFMENUCIDRE	10
	STORELISTREFDATESMENU	10
	*/
	
DESCRIBE DBA_USERS
	/*
	Nom                         NULL ?   Type           
	--------------------------- -------- -------------- 
	USERNAME                   NOT NULL VARCHAR2(30)  
	USER_ID                    NOT NULL NUMBER        
	PASSWORD                            VARCHAR2(30)  
	ACCOUNT_STATUS             NOT NULL VARCHAR2(32)  
	LOCK_DATE                           DATE          
	EXPIRY_DATE                         DATE          
	DEFAULT_TABLESPACE         NOT NULL VARCHAR2(30)  
	TEMPORARY_TABLESPACE       NOT NULL VARCHAR2(30)  
	CREATED                    NOT NULL DATE          
	PROFILE                    NOT NULL VARCHAR2(30)  
	INITIAL_RSRC_CONSUMER_GROUP          VARCHAR2(30)  
	EXTERNAL_NAME                       VARCHAR2(4000) 
	PASSWORD_VERSIONS                   VARCHAR2(8)   
	EDITIONS_ENABLED                    VARCHAR2(1)   
	AUTHENTICATION_TYPE                 VARCHAR2(8)   
	*/
	
-- Pour avoir la liste des tables système
SELECT TABLE_NAME FROM DBA_TABLES WHERE TABLE_NAME LIKE '%$';
	/*
	ICOL$
	IND$
	COL$
	CLU$
	TAB$
	LOB$
	COLTYPE$
	-- 510 lignes
	*/
